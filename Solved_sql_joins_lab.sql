USE sakila;


/* Challenge - Joining on multiple tables
Write SQL queries to perform the following tasks using the Sakila database:

1. List the number of films per category.
2. Retrieve the store ID, city, and country for each store.
3. Calculate the total revenue generated by each store in dollars.
4. Determine the average running time of films for each category.
Bonus:

5. Identify the film categories with the longest average running time.
6. Display the top 10 most frequently rented movies in descending order.
7. Determine if "Academy Dinosaur" can be rented from Store 1.
8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
	Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, 
    and this information can be obtained using a CASE statement combined with IFNULL."

*/

-- 1. List the number of films per category. -- 

SELECT c.name AS category_name, count(distinct(f.film_id)) AS films_category FROM sakila.film AS f
LEFT JOIN sakila.film_category AS fc 
ON f.film_id = fc.film_id
JOIN sakila.category AS c
ON fc.category_id=c.category_id
GROUP BY category_name;

-- 2. Retrieve the store ID, city, and country for each store. --

SELECT s.store_id AS store_id, ci.city AS store_city, co.country AS store_country
FROM sakila.store AS s
LEFT JOIN sakila.address AS a
ON s.address_id = a.address_id
JOIN sakila.city AS ci
ON a.city_id=ci.city_id
JOIN sakila.country AS co
ON ci.country_id = co.country_id;


-- 3. Calculate the total revenue generated by each store in dollars. --


SELECT sto.store_id AS store_id,SUM(p.amount) AS amount_per_store
FROM sakila.payment AS p
LEFT JOIN sakila.staff AS sta
ON p.staff_id = sta.staff_id
JOIN sakila.store AS sto
ON sta.store_id=sto.store_id
GROUP BY store_id;

-- 4. Determine the average running time of films for each category. --

SELECT c.name AS category_name,round(AVG(f.length),2) AS avg_length
FROM sakila.film AS f
LEFT JOIN sakila.film_category AS fc
ON f.film_id=fc.film_id
JOIN sakila.category AS c
ON fc.category_id = c.category_id
GROUP BY category_name;

-- 5. Identify the film categories with the longest average running time.

SELECT c.name AS category_name,round(AVG(f.length),2) AS avg_length
FROM sakila.film AS f
LEFT JOIN sakila.film_category AS fc
ON f.film_id=fc.film_id
JOIN sakila.category AS c
ON fc.category_id = c.category_id
GROUP BY category_name
ORDER BY avg_length DESC;
-- LIMIT X to how many we want to show

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT t.title AS movie_title, count(distinct(r.rental_id)) AS rented_count FROM sakila.rental AS r
LEFT JOIN sakila.inventory AS i
ON r.inventory_id = i.inventory_id
JOIN sakila.film_text AS t
ON i.film_id=t.film_id
GROUP BY movie_title
ORDER BY rented_count DESC
LIMIT 10;
-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT i.inventory_id AS inventory_id,title AS movie_title, i.store_id AS store_id
FROM sakila.inventory AS i
LEFT JOIN sakila.film_text AS t
ON i.film_id=t.film_id
WHERE title = "Academy Dinosaur" AND store_id = 1;

-- or counting how many we have on store one -- 

SELECT i.store_id AS store_id,title AS movie_title,count(distinct(i.inventory_id)) AS movie_count
FROM sakila.inventory AS i
LEFT JOIN sakila.film_text AS t
ON i.film_id=t.film_id
WHERE title = "Academy Dinosaur"
GROUP BY movie_title,store_id;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- 	Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, 
--  and this information can be obtained using a CASE statement combined with IFNULL."

SELECT f.title AS film_title,
    CASE
        WHEN IFNULL(COUNT(i.inventory_id), 0) > 0 THEN 'Available'
        ELSE 'Not Available'
    END AS availability_status
FROM film f
LEFT JOIN inventory i 
ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY f.title;

